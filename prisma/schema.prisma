// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth用のテーブル
model Account {
  id                String  @id @default(dbgenerated("uuid_generate_v4()"))
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v4()"))
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(dbgenerated("uuid_generate_v4()"))
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  avatarId      Int       @default(1) @map("avatar_id")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz()

  // NextAuth Relations
  accounts Account[]
  sessions Session[]

  // Application Relations
  workSessions WorkSession[]
  workRecords  WorkRecord[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model WorkSession {
  id           String        @id @default(dbgenerated("uuid_generate_v4()"))
  userId       String        @map("user_id")
  sessionType  SessionType   @map("session_type")
  status       SessionStatus @default(ACTIVE)
  workMinutes  Int           @map("work_minutes")
  breakMinutes Int           @map("break_minutes")
  cycles       Int
  currentCycle Int           @default(1) @map("current_cycle")
  startedAt    DateTime      @default(now()) @map("started_at") @db.Timestamptz()
  endedAt      DateTime?     @map("ended_at") @db.Timestamptz()
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz()

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("work_sessions")
}

model WorkRecord {
  id          String     @id @default(dbgenerated("uuid_generate_v4()"))
  userId      String     @map("user_id")
  recordType  RecordType @map("record_type")
  workMinutes Int        @map("work_minutes")
  memo        String?
  recordedAt  DateTime   @default(now()) @map("recorded_at") @db.Timestamptz()
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime   @updatedAt @map("updated_at") @db.Timestamptz()

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("work_records")
}

model Avatar {
  id        Int      @id @default(autoincrement())
  name      String
  svgPath   String   @map("svg_path")
  category  String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("avatars")
}

model DailyStats {
  id               String   @id @default(dbgenerated("uuid_generate_v4()"))
  userId           String   @map("user_id")
  date             DateTime @db.Date
  totalWorkMinutes Int      @map("total_work_minutes")
  pomodoroCount    Int      @default(0) @map("pomodoro_count")
  manualCount      Int      @default(0) @map("manual_count")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@unique([userId, date])
  @@map("daily_stats")
}

// Enums
enum SessionType {
  WORK
  SHORT_BREAK
  LONG_BREAK

  @@map("session_type")
}

enum SessionStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED

  @@map("session_status")
}

enum RecordType {
  POMODORO
  MANUAL

  @@map("record_type")
}
